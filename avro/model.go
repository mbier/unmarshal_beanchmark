// Code generated by github.com/actgardner/gogen-avro/v8. DO NOT EDIT.
/*
 * SOURCE:
 *     model.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v9/compiler"
	"github.com/actgardner/gogen-avro/v9/vm"
	"github.com/actgardner/gogen-avro/v9/vm/types"
)

var _ = fmt.Printf

type Model struct {
	String string `json:"string"`

	Float float32 `json:"float"`

	Integer int32 `json:"integer"`

	Date string `json:"date"`

	Boolean bool `json:"boolean"`
}

const ModelAvroCRC64Fingerprint = "0\u007f\r\xb43Ä°Q"

func NewModel() Model {
	r := Model{}
	return r
}

func DeserializeModel(r io.Reader) (Model, error) {
	t := NewModel()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeModelFromSchema(r io.Reader, schema string) (Model, error) {
	t := NewModel()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeModel(r Model, w io.Writer) error {
	var err error
	err = vm.WriteString(r.String, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.Float, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Integer, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Date, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.Boolean, w)
	if err != nil {
		return err
	}
	return err
}

func (r Model) Serialize(w io.Writer) error {
	return writeModel(r, w)
}

func (r Model) Schema() string {
	return "{\"fields\":[{\"name\":\"string\",\"type\":\"string\"},{\"name\":\"float\",\"type\":\"float\"},{\"name\":\"integer\",\"type\":\"int\"},{\"name\":\"date\",\"type\":\"string\"},{\"name\":\"boolean\",\"type\":\"boolean\"}],\"name\":\"Model\",\"type\":\"record\"}"
}

func (r Model) SchemaName() string {
	return "Model"
}

func (_ Model) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Model) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Model) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Model) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Model) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Model) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Model) SetString(v string)   { panic("Unsupported operation") }
func (_ Model) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Model) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.String{Target: &r.String}
	case 1:
		return &types.Float{Target: &r.Float}
	case 2:
		return &types.Int{Target: &r.Integer}
	case 3:
		return &types.String{Target: &r.Date}
	case 4:
		return &types.Boolean{Target: &r.Boolean}
	}
	panic("Unknown field index")
}

func (r *Model) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Model) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Model) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Model) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Model) Finalize()                        {}

func (_ Model) AvroCRC64Fingerprint() []byte {
	return []byte(ModelAvroCRC64Fingerprint)
}

func (r Model) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["string"], err = json.Marshal(r.String)
	if err != nil {
		return nil, err
	}
	output["float"], err = json.Marshal(r.Float)
	if err != nil {
		return nil, err
	}
	output["integer"], err = json.Marshal(r.Integer)
	if err != nil {
		return nil, err
	}
	output["date"], err = json.Marshal(r.Date)
	if err != nil {
		return nil, err
	}
	output["boolean"], err = json.Marshal(r.Boolean)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Model) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["string"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.String); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for string")
	}
	val = func() json.RawMessage {
		if v, ok := fields["float"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Float); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for float")
	}
	val = func() json.RawMessage {
		if v, ok := fields["integer"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Integer); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for integer")
	}
	val = func() json.RawMessage {
		if v, ok := fields["date"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Date); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for date")
	}
	val = func() json.RawMessage {
		if v, ok := fields["boolean"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Boolean); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for boolean")
	}
	return nil
}
